@echo off
chcp 65001 >nul
cls

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üîÄ MERGE SEGURO EM PORTUGU√äS                             ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

echo üõ°Ô∏è Sistema de merge seguro com verifica√ß√µes de seguran√ßa...
echo.

REM Verificar se Git est√° dispon√≠vel
git --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå ERRO: Git n√£o est√° dispon√≠vel
    pause
    exit /b 1
)

REM Verificar se estamos num reposit√≥rio Git
git status >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå ERRO: N√£o √© um reposit√≥rio Git
    pause
    exit /b 1
)

REM Obter branch atual
for /f "tokens=*" %%i in ('git branch --show-current 2^>nul') do set current_branch=%%i
if "%current_branch%"=="" (
    echo ‚ùå ERRO: N√£o foi poss√≠vel determinar a branch atual
    pause
    exit /b 1
)

echo ‚úÖ Branch atual: %current_branch%
echo.

REM Verificar se h√° altera√ß√µes n√£o commitadas
git diff --quiet
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è  AVISO: H√° altera√ß√µes n√£o commitadas
    echo.
    echo üìã ALTERA√á√ïES PENDENTES:
    git status --porcelain
    echo.
    echo ‚ùì Deseja continuar? As altera√ß√µes n√£o commitadas podem causar conflitos. (s/N)
    set /p continue_uncommitted=""
    if /i not "%continue_uncommitted%"=="s" (
        echo ‚ÑπÔ∏è  Merge cancelado. Fa√ßa commit das altera√ß√µes primeiro.
        pause
        exit /b 0
    )
)

REM Listar branches dispon√≠veis
echo üìã BRANCHES DISPON√çVEIS:
git branch -a | findstr /v "HEAD"
echo.

REM Solicitar branch de origem
echo üîÄ MERGE DE BRANCH:
echo.
set /p source_branch="Digite o nome da branch a fazer merge: "

if "%source_branch%"=="" (
    echo ‚ùå ERRO: Nome da branch √© obrigat√≥rio
    pause
    exit /b 1
)

REM Verificar se branch existe
git show-ref --verify --quiet refs/heads/%source_branch%
if %errorlevel% neq 0 (
    REM Tentar branch remota
    git show-ref --verify --quiet refs/remotes/origin/%source_branch%
    if !errorlevel! neq 0 (
        echo ‚ùå ERRO: Branch '%source_branch%' n√£o encontrada
        pause
        exit /b 1
    ) else (
        echo ‚ÑπÔ∏è  Branch remota encontrada: origin/%source_branch%
        set "source_branch=origin/%source_branch%"
    )
)

echo ‚úÖ Branch encontrada: %source_branch%
echo.

REM Verificar se √© merge para branch principal
if /i "%current_branch%"=="main" (
    echo ‚ö†Ô∏è  AVISO: Est√° a fazer merge para a branch MAIN
    echo    Certifique-se de que as altera√ß√µes foram testadas
    set "is_main_merge=1"
) else if /i "%current_branch%"=="master" (
    echo ‚ö†Ô∏è  AVISO: Est√° a fazer merge para a branch MASTER
    echo    Certifique-se de que as altera√ß√µes foram testadas
    set "is_main_merge=1"
) else (
    set "is_main_merge=0"
)

echo.
echo üîç Verificando seguran√ßa antes do merge...

REM Verifica√ß√£o de seguran√ßa
call verificar_seguranca_simples.bat >nul 2>&1
set "SECURITY_RESULT=%errorlevel%"

if %SECURITY_RESULT% gtr 1 (
    echo ‚ùå CR√çTICO: Verifica√ß√£o de seguran√ßa falhou!
    echo.
    echo üö® PROBLEMAS CR√çTICOS ENCONTRADOS
    echo    Execute: verificar_seguranca_simples.bat
    echo    Corrija os problemas antes do merge
    echo.
    pause
    exit /b 1
)

echo ‚úÖ Verifica√ß√£o de seguran√ßa aprovada
echo.

REM Verificar diferen√ßas entre branches
echo üìä DIFEREN√áAS ENTRE BRANCHES:
git log --oneline %current_branch%..%source_branch% | head -10
echo.

REM Verificar se h√° conflitos potenciais
echo üîç Verificando conflitos potenciais...
git merge-tree $(git merge-base %current_branch% %source_branch%) %current_branch% %source_branch% >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è  AVISO: Podem existir conflitos no merge
) else (
    echo ‚úÖ Nenhum conflito √≥bvio detectado
)

echo.

REM Solicitar tipo de merge
echo üîÄ TIPO DE MERGE:
echo.
echo 1. Merge normal (cria commit de merge)
echo 2. Fast-forward (se poss√≠vel)
echo 3. Squash (combina commits numa s√≥)
echo.
set /p merge_type="Escolha o tipo (1-3): "

if "%merge_type%"=="1" set "merge_options="
if "%merge_type%"=="2" set "merge_options=--ff-only"
if "%merge_type%"=="3" set "merge_options=--squash"

if "%merge_options%"=="" if not "%merge_type%"=="1" (
    echo ‚ùå ERRO: Op√ß√£o inv√°lida
    pause
    exit /b 1
)

REM Solicitar mensagem de merge (se necess√°rio)
if "%merge_type%"=="1" (
    echo.
    echo üí¨ MENSAGEM DE MERGE:
    echo.
    echo üìù EXEMPLOS:
    echo    ‚Ä¢ "Integrar funcionalidade de autentica√ß√£o"
    echo    ‚Ä¢ "Corrigir conflitos na branch de desenvolvimento"
    echo    ‚Ä¢ "Adicionar melhorias de performance"
    echo.
    set /p merge_message="Mensagem (opcional): "
    
    if not "%merge_message%"=="" (
        set "merge_options=--message \"%merge_message%\""
    )
)

if "%merge_type%"=="3" (
    echo.
    echo üí¨ MENSAGEM PARA SQUASH:
    echo.
    set /p squash_message="Mensagem do commit squash: "
    
    if "%squash_message%"=="" (
        echo ‚ùå ERRO: Mensagem √© obrigat√≥ria para squash
        pause
        exit /b 1
    )
)

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üìã RESUMO DO MERGE                                        ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo üéØ Branch destino: %current_branch%
echo üîÄ Branch origem: %source_branch%
echo üè∑Ô∏è  Tipo: %merge_type%
if not "%merge_message%"=="" echo üí¨ Mensagem: %merge_message%
if not "%squash_message%"=="" echo üí¨ Mensagem squash: %squash_message%
echo.

REM Confirma√ß√£o final
if "%is_main_merge%"=="1" (
    echo ‚ö†Ô∏è  ATEN√á√ÉO: MERGE PARA BRANCH PRINCIPAL
    echo.
    echo üîí CONFIRMA√á√ÉO EXTRA NECESS√ÅRIA
    echo    Digite "CONFIRMAR" para proceder:
    set /p extra_confirm=""
    if /i not "%extra_confirm%"=="CONFIRMAR" (
        echo ‚ÑπÔ∏è  Merge cancelado - confirma√ß√£o n√£o recebida
        pause
        exit /b 0
    )
) else (
    echo ‚ùì Confirma este merge? (s/N)
    set /p final_confirm=""
    if /i not "%final_confirm%"=="s" (
        echo ‚ÑπÔ∏è  Merge cancelado pelo utilizador
        pause
        exit /b 0
    )
)

echo.
echo üöÄ Executando merge...

REM Executar merge baseado no tipo
if "%merge_type%"=="1" (
    if "%merge_message%"=="" (
        git merge %source_branch%
    ) else (
        git merge %source_branch% -m "%merge_message%"
    )
) else if "%merge_type%"=="2" (
    git merge --ff-only %source_branch%
) else if "%merge_type%"=="3" (
    git merge --squash %source_branch%
    if !errorlevel! equ 0 (
        echo.
        echo üìù Fazendo commit do squash...
        git commit -m "%squash_message%"
    )
)

set "MERGE_RESULT=%errorlevel%"

echo.
if %MERGE_RESULT% equ 0 (
    echo üéâ MERGE REALIZADO COM SUCESSO!
    echo.
    echo ‚úÖ PR√ìXIMOS PASSOS:
    echo    ‚Ä¢ Verificar: git log --oneline -5
    echo    ‚Ä¢ Testar altera√ß√µes
    echo    ‚Ä¢ Push: git push origin %current_branch%
    echo.
    
    REM Mostrar √∫ltimos commits
    echo üìã √öLTIMOS COMMITS:
    git log --oneline -5
    echo.
    
    REM Verifica√ß√£o de seguran√ßa p√≥s-merge
    echo üîç Verifica√ß√£o de seguran√ßa p√≥s-merge...
    call verificar_seguranca_simples.bat >nul 2>&1
    if !errorlevel! gtr 1 (
        echo ‚ö†Ô∏è  AVISO: Problemas de seguran√ßa detectados ap√≥s merge
        echo    Execute: verificar_seguranca_simples.bat
    ) else (
        echo ‚úÖ Verifica√ß√£o p√≥s-merge aprovada
    )
    
    echo.
    REM Perguntar sobre push
    echo ‚ùì Deseja fazer push agora? (s/N)
    set /p do_push=""
    if /i "%do_push%"=="s" (
        echo.
        echo üì§ Fazendo push...
        git push origin %current_branch%
        if !errorlevel! equ 0 (
            echo ‚úÖ Push realizado com sucesso!
        ) else (
            echo ‚ö†Ô∏è  Erro no push. Execute manualmente: git push
        )
    )
    
) else (
    echo ‚ùå ERRO: Falha no merge
    echo.
    echo üîß POSS√çVEIS SOLU√á√ïES:
    echo    ‚Ä¢ Resolver conflitos manualmente
    echo    ‚Ä¢ git status (ver estado atual)
    echo    ‚Ä¢ git merge --abort (cancelar merge)
    echo.
    echo üìã COMANDOS √öTEIS:
    echo    ‚Ä¢ git diff (ver conflitos)
    echo    ‚Ä¢ git add ficheiro (marcar como resolvido)
    echo    ‚Ä¢ git commit (finalizar merge manual)
)

echo.
pause
exit /b %MERGE_RESULT%